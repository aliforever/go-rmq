// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	rmq "github.com/aliforever/go-rmq"
	mock "github.com/stretchr/testify/mock"
)

// ChannelImpl is an autogenerated mock type for the ChannelImpl type
type ChannelImpl struct {
	mock.Mock
}

// CloseChan provides a mock function with given fields:
func (_m *ChannelImpl) CloseChan() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// ConsumerBuilder provides a mock function with given fields: name, queue
func (_m *ChannelImpl) ConsumerBuilder(name string, queue string) rmq.ConsumerBuilderImpl {
	ret := _m.Called(name, queue)

	var r0 rmq.ConsumerBuilderImpl
	if rf, ok := ret.Get(0).(func(string, string) rmq.ConsumerBuilderImpl); ok {
		r0 = rf(name, queue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ConsumerBuilderImpl)
		}
	}

	return r0
}

// DirectExchangeBuilder provides a mock function with given fields: name
func (_m *ChannelImpl) DirectExchangeBuilder(name string) rmq.ExchangeBuilderImpl {
	ret := _m.Called(name)

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func(string) rmq.ExchangeBuilderImpl); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// ExchangeBuilder provides a mock function with given fields: name
func (_m *ChannelImpl) ExchangeBuilder(name string) rmq.ExchangeBuilderImpl {
	ret := _m.Called(name)

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func(string) rmq.ExchangeBuilderImpl); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// FanoutExchangeBuilder provides a mock function with given fields: name
func (_m *ChannelImpl) FanoutExchangeBuilder(name string) rmq.ExchangeBuilderImpl {
	ret := _m.Called(name)

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func(string) rmq.ExchangeBuilderImpl); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// PublisherBuilder provides a mock function with given fields: exchange, routingKey
func (_m *ChannelImpl) PublisherBuilder(exchange string, routingKey string) rmq.PublisherBuilderImpl {
	ret := _m.Called(exchange, routingKey)

	var r0 rmq.PublisherBuilderImpl
	if rf, ok := ret.Get(0).(func(string, string) rmq.PublisherBuilderImpl); ok {
		r0 = rf(exchange, routingKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.PublisherBuilderImpl)
		}
	}

	return r0
}

// QueueBuilder provides a mock function with given fields:
func (_m *ChannelImpl) QueueBuilder() rmq.QueueBuilderImpl {
	ret := _m.Called()

	var r0 rmq.QueueBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.QueueBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueBuilderImpl)
		}
	}

	return r0
}

// TopicExchangeBuilder provides a mock function with given fields: name
func (_m *ChannelImpl) TopicExchangeBuilder(name string) rmq.ExchangeBuilderImpl {
	ret := _m.Called(name)

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func(string) rmq.ExchangeBuilderImpl); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// NewChannelImpl creates a new instance of ChannelImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChannelImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChannelImpl {
	mock := &ChannelImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
