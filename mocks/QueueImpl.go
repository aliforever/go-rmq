// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueueImpl is an autogenerated mock type for the QueueImpl type
type QueueImpl struct {
	mock.Mock
}

// BindToExchange provides a mock function with given fields: exchange, routingKey, noWait, args
func (_m *QueueImpl) BindToExchange(exchange string, routingKey string, noWait bool, args map[string]interface{}) error {
	ret := _m.Called(exchange, routingKey, noWait, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, map[string]interface{}) error); ok {
		r0 = rf(exchange, routingKey, noWait, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *QueueImpl) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewQueueImpl creates a new instance of QueueImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueImpl {
	mock := &QueueImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
