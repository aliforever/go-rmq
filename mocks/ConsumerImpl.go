// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	amqp091 "github.com/rabbitmq/amqp091-go"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerImpl is an autogenerated mock type for the ConsumerImpl type
type ConsumerImpl struct {
	mock.Mock
}

// Cancel provides a mock function with given fields:
func (_m *ConsumerImpl) Cancel() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ErrorChan provides a mock function with given fields:
func (_m *ConsumerImpl) ErrorChan() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// Messages provides a mock function with given fields:
func (_m *ConsumerImpl) Messages() <-chan amqp091.Delivery {
	ret := _m.Called()

	var r0 <-chan amqp091.Delivery
	if rf, ok := ret.Get(0).(func() <-chan amqp091.Delivery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp091.Delivery)
		}
	}

	return r0
}

// NewConsumerImpl creates a new instance of ConsumerImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerImpl {
	mock := &ConsumerImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
