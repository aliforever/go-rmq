// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"

	rmq "github.com/aliforever/go-rmq"

	sync "github.com/aliforever/go-generic-sync-map"
)

// PublisherImpl is an autogenerated mock type for the PublisherImpl type
type PublisherImpl struct {
	mock.Mock
}

// Fields provides a mock function with given fields:
func (_m *PublisherImpl) Fields() rmq.PublishFieldsImpl {
	ret := _m.Called()

	var r0 rmq.PublishFieldsImpl
	if rf, ok := ret.Get(0).(func() rmq.PublishFieldsImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.PublishFieldsImpl)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, data
func (_m *PublisherImpl) Publish(ctx context.Context, data interface{}) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishAwaitResponse provides a mock function with given fields: ctx, data, responseMap
func (_m *PublisherImpl) PublishAwaitResponse(ctx context.Context, data interface{}, responseMap *sync.Map[chan amqp091.Delivery]) (amqp091.Delivery, error) {
	ret := _m.Called(ctx, data, responseMap)

	var r0 amqp091.Delivery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *sync.Map[chan amqp091.Delivery]) (amqp091.Delivery, error)); ok {
		return rf(ctx, data, responseMap)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *sync.Map[chan amqp091.Delivery]) amqp091.Delivery); ok {
		r0 = rf(ctx, data, responseMap)
	} else {
		r0 = ret.Get(0).(amqp091.Delivery)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, *sync.Map[chan amqp091.Delivery]) error); ok {
		r1 = rf(ctx, data, responseMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishWithConfirmation provides a mock function with given fields: ctx, data
func (_m *PublisherImpl) PublishWithConfirmation(ctx context.Context, data interface{}) (bool, error) {
	ret := _m.Called(ctx, data)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (bool, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) bool); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithFields provides a mock function with given fields: fields
func (_m *PublisherImpl) WithFields(fields rmq.PublishFieldsImpl) rmq.PublisherImpl {
	ret := _m.Called(fields)

	var r0 rmq.PublisherImpl
	if rf, ok := ret.Get(0).(func(rmq.PublishFieldsImpl) rmq.PublisherImpl); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.PublisherImpl)
		}
	}

	return r0
}

// NewPublisherImpl creates a new instance of PublisherImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisherImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublisherImpl {
	mock := &PublisherImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
