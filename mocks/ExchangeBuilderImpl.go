// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	rmq "github.com/aliforever/go-rmq"
	mock "github.com/stretchr/testify/mock"
)

// ExchangeBuilderImpl is an autogenerated mock type for the ExchangeBuilderImpl type
type ExchangeBuilderImpl struct {
	mock.Mock
}

// AddArg provides a mock function with given fields: key, val
func (_m *ExchangeBuilderImpl) AddArg(key string, val interface{}) rmq.ExchangeBuilderImpl {
	ret := _m.Called(key, val)

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func(string, interface{}) rmq.ExchangeBuilderImpl); ok {
		r0 = rf(key, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// Declare provides a mock function with given fields:
func (_m *ExchangeBuilderImpl) Declare() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOnDeclare provides a mock function with given fields: ifUnused, noWait
func (_m *ExchangeBuilderImpl) DeleteOnDeclare(ifUnused bool, noWait bool) rmq.ExchangeBuilderImpl {
	ret := _m.Called(ifUnused, noWait)

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func(bool, bool) rmq.ExchangeBuilderImpl); ok {
		r0 = rf(ifUnused, noWait)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// SetAutoDelete provides a mock function with given fields:
func (_m *ExchangeBuilderImpl) SetAutoDelete() rmq.ExchangeBuilderImpl {
	ret := _m.Called()

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.ExchangeBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// SetDurable provides a mock function with given fields:
func (_m *ExchangeBuilderImpl) SetDurable() rmq.ExchangeBuilderImpl {
	ret := _m.Called()

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.ExchangeBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// SetInternal provides a mock function with given fields:
func (_m *ExchangeBuilderImpl) SetInternal() rmq.ExchangeBuilderImpl {
	ret := _m.Called()

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.ExchangeBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// SetNoWait provides a mock function with given fields:
func (_m *ExchangeBuilderImpl) SetNoWait() rmq.ExchangeBuilderImpl {
	ret := _m.Called()

	var r0 rmq.ExchangeBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.ExchangeBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ExchangeBuilderImpl)
		}
	}

	return r0
}

// NewExchangeBuilderImpl creates a new instance of ExchangeBuilderImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeBuilderImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeBuilderImpl {
	mock := &ExchangeBuilderImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
