// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	rmq "github.com/aliforever/go-rmq"
	mock "github.com/stretchr/testify/mock"
)

// PublisherBuilderImpl is an autogenerated mock type for the PublisherBuilderImpl type
type PublisherBuilderImpl struct {
	mock.Mock
}

// New provides a mock function with given fields:
func (_m *PublisherBuilderImpl) New() rmq.PublisherImpl {
	ret := _m.Called()

	var r0 rmq.PublisherImpl
	if rf, ok := ret.Get(0).(func() rmq.PublisherImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.PublisherImpl)
		}
	}

	return r0
}

// NewWithDefaultFields provides a mock function with given fields:
func (_m *PublisherBuilderImpl) NewWithDefaultFields() rmq.PublisherImpl {
	ret := _m.Called()

	var r0 rmq.PublisherImpl
	if rf, ok := ret.Get(0).(func() rmq.PublisherImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.PublisherImpl)
		}
	}

	return r0
}

// WithFields provides a mock function with given fields: fields
func (_m *PublisherBuilderImpl) WithFields(fields *rmq.PublishFields) rmq.PublisherBuilderImpl {
	ret := _m.Called(fields)

	var r0 rmq.PublisherBuilderImpl
	if rf, ok := ret.Get(0).(func(*rmq.PublishFields) rmq.PublisherBuilderImpl); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.PublisherBuilderImpl)
		}
	}

	return r0
}

// NewPublisherBuilderImpl creates a new instance of PublisherBuilderImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisherBuilderImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublisherBuilderImpl {
	mock := &PublisherBuilderImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
