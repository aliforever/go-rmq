// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	rmq "github.com/aliforever/go-rmq"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RmqImpl is an autogenerated mock type for the RmqImpl type
type RmqImpl struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RmqImpl) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields: retryCount, retryDelay, onRetryError
func (_m *RmqImpl) Connect(retryCount int, retryDelay time.Duration, onRetryError func(error)) (<-chan error, error) {
	ret := _m.Called(retryCount, retryDelay, onRetryError)

	var r0 <-chan error
	var r1 error
	if rf, ok := ret.Get(0).(func(int, time.Duration, func(error)) (<-chan error, error)); ok {
		return rf(retryCount, retryDelay, onRetryError)
	}
	if rf, ok := ret.Get(0).(func(int, time.Duration, func(error)) <-chan error); ok {
		r0 = rf(retryCount, retryDelay, onRetryError)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	if rf, ok := ret.Get(1).(func(int, time.Duration, func(error)) error); ok {
		r1 = rf(retryCount, retryDelay, onRetryError)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChannel provides a mock function with given fields:
func (_m *RmqImpl) NewChannel() (rmq.ChannelImpl, error) {
	ret := _m.Called()

	var r0 rmq.ChannelImpl
	var r1 error
	if rf, ok := ret.Get(0).(func() (rmq.ChannelImpl, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() rmq.ChannelImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ChannelImpl)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChannelWithConfirm provides a mock function with given fields:
func (_m *RmqImpl) NewChannelWithConfirm() (rmq.ChannelImpl, error) {
	ret := _m.Called()

	var r0 rmq.ChannelImpl
	var r1 error
	if rf, ok := ret.Get(0).(func() (rmq.ChannelImpl, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() rmq.ChannelImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.ChannelImpl)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOnError provides a mock function with given fields: onError
func (_m *RmqImpl) SetOnError(onError func(error)) {
	_m.Called(onError)
}

// NewRmqImpl creates a new instance of RmqImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRmqImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *RmqImpl {
	mock := &RmqImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
