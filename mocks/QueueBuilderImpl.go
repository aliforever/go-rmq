// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	rmq "github.com/aliforever/go-rmq"
	mock "github.com/stretchr/testify/mock"
)

// QueueBuilderImpl is an autogenerated mock type for the QueueBuilderImpl type
type QueueBuilderImpl struct {
	mock.Mock
}

// AddArg provides a mock function with given fields: key, val
func (_m *QueueBuilderImpl) AddArg(key string, val interface{}) rmq.QueueBuilderImpl {
	ret := _m.Called(key, val)

	var r0 rmq.QueueBuilderImpl
	if rf, ok := ret.Get(0).(func(string, interface{}) rmq.QueueBuilderImpl); ok {
		r0 = rf(key, val)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueBuilderImpl)
		}
	}

	return r0
}

// Declare provides a mock function with given fields:
func (_m *QueueBuilderImpl) Declare() (rmq.QueueImpl, error) {
	ret := _m.Called()

	var r0 rmq.QueueImpl
	var r1 error
	if rf, ok := ret.Get(0).(func() (rmq.QueueImpl, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() rmq.QueueImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueImpl)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAutoDelete provides a mock function with given fields:
func (_m *QueueBuilderImpl) SetAutoDelete() rmq.QueueBuilderImpl {
	ret := _m.Called()

	var r0 rmq.QueueBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.QueueBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueBuilderImpl)
		}
	}

	return r0
}

// SetDurable provides a mock function with given fields:
func (_m *QueueBuilderImpl) SetDurable() rmq.QueueBuilderImpl {
	ret := _m.Called()

	var r0 rmq.QueueBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.QueueBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueBuilderImpl)
		}
	}

	return r0
}

// SetExclusive provides a mock function with given fields:
func (_m *QueueBuilderImpl) SetExclusive() rmq.QueueBuilderImpl {
	ret := _m.Called()

	var r0 rmq.QueueBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.QueueBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueBuilderImpl)
		}
	}

	return r0
}

// SetName provides a mock function with given fields: name
func (_m *QueueBuilderImpl) SetName(name string) rmq.QueueBuilderImpl {
	ret := _m.Called(name)

	var r0 rmq.QueueBuilderImpl
	if rf, ok := ret.Get(0).(func(string) rmq.QueueBuilderImpl); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueBuilderImpl)
		}
	}

	return r0
}

// SetNoWait provides a mock function with given fields:
func (_m *QueueBuilderImpl) SetNoWait() rmq.QueueBuilderImpl {
	ret := _m.Called()

	var r0 rmq.QueueBuilderImpl
	if rf, ok := ret.Get(0).(func() rmq.QueueBuilderImpl); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmq.QueueBuilderImpl)
		}
	}

	return r0
}

// NewQueueBuilderImpl creates a new instance of QueueBuilderImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueBuilderImpl(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueBuilderImpl {
	mock := &QueueBuilderImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
